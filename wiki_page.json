[
 {
  "allow_guest": 1,
  "content": "\n\n## Install from GitHub\n```bash\nbench get-app erpnext --branch version-15\nbench --site mysite.localhost install-app erpnext\n```\n\n## Install a local app\n```bash\nbench --site mysite.localhost install-app my_custom_app\n```\n\n## List installed apps\n```bash\nbench --site mysite.localhost list-apps\n```\n\n## Hosts file setup\n```bash\nsudo nano /etc/hosts\n# add:\n127.0.0.1   mysite.localhost\n```",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:06:37.231732",
  "name": "2lkjg593k4",
  "published": 1,
  "route": "docs/installing-apps",
  "title": "Installing Apps"
 },
 {
  "allow_guest": 1,
  "content": "\n\n\n----------\n\n### 1Ô∏è User & Password Management\n\n-   **Set/Change a user password**\n\n    ```python\n    frappe.utils.password.update_password(\"Administrator\", \"new_password_here\")\n\n    ```\n\n-   **Verify a password (hashed)**\n\n    ```python\n    from frappe.utils.password import check_password\n    check_password(\"user@example.com\", \"password123\")\n\n    ```\n\n\n----------\n\n### 2Ô∏è API Keys & Secrets\n\n-   **Generate API Key and Secret for a user**\n\n    ```python\n    user = frappe.get_doc(\"User\", \"Administrator\")\n    api_secret = frappe.generate_hash(length=15)\n    user.api_key = frappe.generate_hash(length=15)\n    user.api_secret = api_secret\n    user.save()\n    print(\"API Key:\", user.api_key)\n    print(\"API Secret:\", api_secret)\n\n    ```\n\n-   **Fetch existing API key/secret**\n\n    ```python\n    user = frappe.get_doc(\"User\", \"Administrator\")\n    print(user.api_key, user.get_password(\"api_secret\"))\n\n    ```\n\n\n----------\n\n### 3Ô∏è Auth Tokens (OAuth / Session)\n\n-   **Generate session login token**\n\n    ```python\n    from frappe.auth import get_logged_in_user\n    frappe.set_user(\"Administrator\")\n    print(frappe.session.sid)\n\n    ```\n\n-   **Get current logged in user**\n\n    ```python\n    frappe.session.user\n\n    ```\n\n\n----------\n\n### 4Ô∏è User Roles & Permissions\n\n-   **Assign role**\n\n    ```python\n    user = frappe.get_doc(\"User\", \"user@example.com\")\n    user.append(\"roles\", {\"role\": \"System Manager\"})\n    user.save()\n\n    ```\n\n-   **Remove role**\n\n    ```python\n    user = frappe.get_doc(\"User\", \"user@example.com\")\n    user.remove_roles(\"System Manager\")\n\n    ```\n\n\n----------\n\n### 5Ô∏è Email & Notification Testing\n\n-   **Send test email**\n\n    ```python\n    frappe.sendmail(recipients=\"test@example.com\", subject=\"Hello\", message=\"From bench console\")\n\n    ```\n\n-   **Trigger notification**\n\n    ```python\n    from frappe.desk.doctype.notification_log.notification_log import enqueue_create_notification\n    enqueue_create_notification(doc=frappe.get_doc(\"ToDo\", \"TASK0001\"))\n\n    ```\n\n\n----------\n\n### 6Ô∏è Security & Tokens\n\n-   **Reset all API keys/secrets for a user**\n\n    ```python\n    user = frappe.get_doc(\"User\", \"user@example.com\")\n    user.api_key, user.api_secret = None, None\n    user.save()\n\n    ```\n\n-   **Check login status / permissions**\n\n    ```python\n    frappe.has_permission(\"ToDo\", \"read\", user=\"Administrator\")\n\n    ```\n\n\n----------\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:08:09.675415",
  "name": "3ig6ha0v74",
  "published": 1,
  "route": "docs/using-bench-console-pwd",
  "title": "Using Bench Console PWD"
 },
 {
  "allow_guest": 1,
  "content": "\n\n## Full backup\n```bash\nbench --site mysite.localhost backup\n```\n\nBackups stored in:\n```\nsites/mysite.localhost/private/backups\n```\n\n## Database-only backup\n```bash\nbench --site mysite.localhost backup --with-files=false\n```\n\n\n<span style=\"color:orange\">\n--with-files=false</span> ‚Üí a flag that controls whether uploaded files (attachments, images, etc.) are included.<br>\ntrue (default) ‚Üí database + public/private files are backed up.<br>\nfalse ‚Üí only the database is backed up, without the files.\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:11:45.734498",
  "name": "5m1oojdj5k",
  "published": 1,
  "route": "docs/backing-up-data",
  "title": "Backing Up Data"
 },
 {
  "allow_guest": 1,
  "content": "\n\n## Restore\n```bash\nbench --site mysite.localhost --force restore path/to/database.sql.gz\n```\n\n## Restore with files\n```bash\nbench --site mysite.localhost --force restore path/to/database.sql.gz --with-public-files --with-private-files\n```\n\n## After restore\n```bash\nbench --site mysite.localhost migrate\n```\n\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:12:04.548834",
  "name": "5rttpjjff6",
  "published": 1,
  "route": "docs/restoring-database",
  "title": "Restoring Database"
 },
 {
  "allow_guest": 1,
  "content": "---\ntitle: Export / Import Frappe\nlayout: default\norder: 5\n---\n\n\n# Export / Import Frappe\n\n---\n\n## 1. Exporting Customizations & Schema\n\n### Enable Developer Mode\n\nSet `developer_mode = 1` in your `site_config.json`.\nThis ensures DocTypes and customizations are stored as JSON files inside your app directory.\nüëâ [Database Migrations](https://docs.frappe.io/framework/user/en/database-migrations) | [Deployment Migrations](https://docs.frappe.io/framework/user/en/guides/deployment/migrations)\n\n---\n\n### Export Customizations\n\n1. In your site, open **Customize Form**.\n2. Click **Export Customizations** ‚Üí select your app‚Äôs module ‚Üí export.\n\nThis saves custom fields and settings as JSON files inside your app.\nüëâ [Exporting Customizations](https://docs.frappe.io/framework/user/en/guides/app-development/exporting-customizations)\n\n---\n\n### Export Fixtures (Optional)\n\nFor custom DocTypes such as **Custom Field** or **Workflow**, define them in `hooks.py`:\n\n```python\nfixtures = [\"Custom Field\", \"Workflow\"]\n```\n\nRun:\n\n```bash\nbench --site [site-name] export-fixtures\n```\n\nThis generates JSON files in your app‚Äôs `/fixtures` directory.\n\n---\n\n## 2. Exporting Data\n\n### Using Data Export Tool\n\n* Go to the list view of the DocType.\n* Click **Menu > Data Export**.\n* Filter/select fields ‚Üí Export as CSV.\n\n---\n\n### Using Bench Backup\n\nFor larger migrations:\n\n```bash\nbench --site [site-name] backup\n```\n\nThis creates:\n\n* `database.sql.gz` (DB backup)\n* `files` and `private` directories\n\nBackups are stored in:\n`sites/[site-name]/private/backups`\nüëâ [Data Migration Discussion](https://discuss.frappe.io/t/data-migration-from-one-personal-frappe-to-another-personal-frappe-is-it-possible/124723)\n\n---\n\n## 3. Migrating the App to Another Instance\n\n### Move App Code\n\nCopy your app directory into the new instance‚Äôs `apps/`.\n\n### Install the App\n\n```bash\nbench --site [new-site-name] install-app your_app\n```\n\n### Sync Schema\n\n```bash\nbench --site [new-site-name] migrate\n```\n\nThis updates DB tables and syncs DocTypes.\nüëâ [Migrate Command](https://docs.frappe.io/framework/user/en/bench/reference/migrate)\n\n---\n\n## 4. Importing / Restoring Data\n\n### Import CSV\n\n* Use **Data Import Tool**.\n* Upload CSV ‚Üí map fields ‚Üí import.\n\n---\n\n### Restore Database\n\nIf migrating the whole site:\n\n```bash\nbench --site [new-site-name] restore /path/to/backup.sql.gz\n```\n\n‚ö†Ô∏è Ensure all required apps are installed **before** restoring.\n\n---\n\n## 5. Advanced / Cloud Migration\n\nFrappe Cloud provides tools like `bench migrate-to` or their CLI to move sites between local and cloud environments.\nüëâ [Migrate Existing Site (Cloud)](https://docs.frappe.io/cloud/sites/migrate-an-existing-site)\n\n---\n\n## Notes & Best Practices\n\n* Always **move DocTypes and code first**. Data imports will fail if DocTypes are missing.\n* Schema migrations are **not reversible**. Test in staging before applying to production.\n* For external systems, use the [Data Migration Tool](https://docs.frappe.io/framework/user/en/guides/data/using-data-migration-tool).\n* After migration, always run:\n\n  ```bash\n  bench --site [site-name] migrate\n  ```\n\n---\n\n## Summary Table\n\n| What to Move             | How to Export                       | How to Import / Restore |\n| ------------------------ | ----------------------------------- | ----------------------- |\n| App code & DocTypes      | Copy app dir, Export Customizations | Install app ‚Üí `migrate` |\n| Custom fields/workflow   | Export Fixtures / Customizations    | Install app ‚Üí `migrate` |\n| Data (bulk / multi-type) | `bench backup`                      | `bench restore`         |\n| Data (single DocType)    | Data Export (CSV)                   | Data Import Tool        |\n| External integrations    | Data Migration Tool                 | Data Migration Tool     |\n\n---\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:12:41.969916",
  "name": "67jrhasmte",
  "published": 1,
  "route": "docs/export-import-frappe",
  "title": "Export / Import Frappe"
 },
 {
  "allow_guest": 1,
  "content": "---\ntitle: Kill Frappe Process\nlayout: default\norder: 10\n---\n\n## Use  kill & lsof command to terminate the frappe process\n\nsometime it happenns that the frappe process is running in background and we dont have access to it \n\nand then if we try to run 'bench start'\nwe get this type of error (because of background running frappe process)\n\n```\n\n\n17:25:27 redis_cache.1 | 99370:M 08 Sep 2025 17:25:27.676 # Warning: Could not create server TCP listening socket 127.0.0.1:13000: bind: Address already in use\n17:25:27 redis_queue.1 | 99372:M 08 Sep 2025 17:25:27.676 # Warning: Could not create server TCP listening socket 127.0.0.1:11000: bind: Address already in use\n17:25:27 system        | socketio.1 stopped (rc=-15)\n17:25:27 system        | redis_queue.1 stopped (rc=1)\n17:25:27 system        | watch.1 stopped (rc=-15)\n\n```\n## To Fix it find the process id and kill with sudo\n\n```bash\nbench start | grep port\n```\n\n```\n[inxeoz@manjaro-i3 | prob | 05:31:12 PM]$ bench start | grep port\n17:31:18 redis_cache.1 | 102389:M 08 Sep 2025 17:31:18.457 * Running mode=standalone, port=13000.\n17:31:18 redis_cache.1 | 102389:M 08 Sep 2025 17:31:18.457 # Failed listening on port 13000 (tcp), aborting.\n17:31:18 redis_queue.1 | 102391:M 08 Sep 2025 17:31:18.458 * Running mode=standalone, port=11000.\n17:31:18 redis_queue.1 | 102391:M 08 Sep 2025 17:31:18.458 # Failed listening on port 11000 (tcp), aborting.\n(cenv)\n[inxeoz@manjaro-i3 | prob | 05:31:18 PM]$\n```\n## find process id which using these port\n\nfor each port\n\n```bash\nsudo lsof -t -i :PORT_NUMBER\n```\nand then kill that PID\n\n```bash\nsudo kill PID\n```\n\n\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:13:43.735719",
  "name": "6qtrl8np2u",
  "published": 1,
  "route": "docs/kill-frappe-process",
  "title": "Kill Frappe Process"
 },
 {
  "allow_guest": 1,
  "content": "\n## How to Run Two Frappe Apps Simultaneously: Different Methods Explained\n\nThe Frappe framework, via the **Bench** tool, is built for modular, multi-app, and multi-site scenarios. There are several ways to run two (or more) Frappe apps on a single system‚Äîeach method serving different use cases, levels of isolation, and operational complexity.\n\n## 1. **Multi-Site, Single Bench (Recommended and Most Common)**\n\n**Overview:**\\\nRun both apps inside the same bench folder, installing each app on a different site. This leverages Frappe's built-in multi-tenancy support and lets you host and run any number of apps across any number of sites at the same time.\n\n**Steps:**\n\n* Create a bench:\n\n  ```bash\n  bench init my-bench\n  cd my-bench\n  ```\n\n* Add both apps:\n\n  ```bash\n  bench get-app app_a [repo-url-A]\n  bench get-app app_b [repo-url-B]\n  ```\n\n* Create two (or more) sites:\n\n  ```bash\n  bench new-site sitea.local\n  bench new-site siteb.local\n  ```\n\n* Install each app on its respective site:\n\n  ```bash\n  bench --site sitea.local install-app app_a\n  bench --site siteb.local install-app app_b\n  ```\n\n* Enable DNS multitenancy and configure `/etc/hosts`:\n\n  ```bash\n  bench config dns_multitenant on\n  ```\n\n  ```bash\n  text127.0.0.1 sitea.local\n  127.0.0.1 siteb.local\n  ```\n\n* Start bench:\n\n  ```bash\n  bench start\n  ```\n\n* Access both apps at `http://sitea.local:8000` and `http://siteb.local:8000` in your browser.\n\n**Benefits:**\\\nFast development, minimal resource overhead, each site can have its own app stack‚Äî<a target=\"_blank\" href=\"https://discuss.frappe.io/t/how-to-run-two-sites-simultaneously-in-development-environment/55565\">5</a><a target=\"_blank\" href=\"https://discuss.frappe.io/t/want-to-run-two-projects-at-the-same-time/107617\">3</a><a target=\"_blank\" href=\"https://discuss.frappe.io/t/is-it-possible-to-run-multiple-sites-simultaneously/15274\">2</a><a target=\"_blank\" href=\"https://discuss.frappe.io/t/how-to-setup-multiple-sites-on-single-bench-instance/129147\">4</a>.\n\n## 2. **Port-Based Multi-Site / Multi-App**\n\n**Overview:**\\\nInstead of using different domains, assign different ports to each site so you can access, for example, `http://localhost:8001` and `http://localhost:8002`.\n\n**Method:**\n\n* Turn **DNS multi-tenancy OFF**:\n\n  ```bash\n  bench config dns_multitenant off\n  ```\n\n* Assign a port per site:\n\n  ```bash\n  bench set-nginx-port sitea.local 8001\n  bench set-nginx-port siteb.local 8002\n  bench setup nginx\n  sudo systemctl reload nginx   # or 'sudo service nginx reload' on non-Arch systems\n  ```\n\n* Then access `http://localhost:8001` and `http://localhost:8002`.\n\n**Benefits:**\\\nDirect, domain-free access; suitable for quick testing or when DNS/domain setup is impractical.\n\n**Challenges:**\\\nProne to port conflicts, less flexible, can require more manual tweaking, and some users have reported display issues on second port/site<a target=\"_blank\" href=\"https://discuss.frappe.io/t/is-it-possible-to-run-multiple-sites-simultaneously/15274\">2</a><a target=\"_blank\" href=\"https://discuss.frappe.io/t/want-to-run-two-projects-at-the-same-time/107617\">3</a>.\n\n## 3. **Multi-Bench, Multi-App**\n\n**Overview:**\\\nRun each app in a completely separate bench instance (folder/environment), which is useful when you need strict isolation (e.g., different Frappe or Python versions, or divergent dependencies).\n\n**Method:**\n\n* Create two separate benches:\n\n  ```bash\n  bench init bench_a\n  bench init bench_b\n  ```\n\n* Set up separate virtual environments; install respective apps and sites as above.\n\n* Start both benches (the development server will attempt to use a free port for each).\n\n**Benefits:**\\\nMaximum isolation, no risk of version or dependency clashes.\n\n**Costs:**\\\nRequires more resources; each bench is heavyweight, best for advanced or conflicting setups.\n\n## 4. **Multiple Frappe Instances (Experimental)**\n\n**Tools like** <a target=\"_blank\" href=\"https://discuss.frappe.io/t/frappe-manager-v0-10-enable-multiple-frappe-instances-simultaneously/117214\">**Frappe-Manager v0.10+**</a> **are being developed** to make managing multiple Frappe ‚Äúinstances‚Äù or environments easier, each potentially with its own set of benches and apps. This is still less common but is gaining interest for larger multi-instance deployments<a target=\"_blank\" href=\"https://discuss.frappe.io/t/frappe-manager-v0-10-enable-multiple-frappe-instances-simultaneously/117214\">7</a>.\n\n## Advanced: Both Apps on a Single Site\n\nYou can also **install both apps on the same Frappe site** (using `bench --site <sitename> install-app <appname>` for both applications). They will ‚Äúcoexist‚Äù on the same database and site. Use this when the apps are tightly coupled or meant to extend a single system, but note that version or namespace conflicts can arise.\n\n## Key Considerations\n\n| Method                              | Isolation | Setup Complexity | Best For                                   |\n| ----------------------------------- | --------- | ---------------- | ------------------------------------------ |\n| Single Bench, Multi-Site (DNS)      | Medium    | Easy             | Most dev/production and standard needs     |\n| Single Bench, Port-Based Multi-Site | Medium    | Moderate         | Quick tests, restricted DNS environments   |\n| Multi Bench                         | High      | Advanced         | Strict isolation, conflicting dependencies |\n| Frappe Manager                      | Very High | Experimental     | Multi-customer, multi-stack deployments    |\n| Multiple Apps, Single Site          | Low       | Easiest          | Tight app coupling, plugin-like extensions |\n\n##\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:14:26.267705",
  "name": "7860f1jsmm",
  "published": 1,
  "route": "docs/two-frappe-apps-simultaneously",
  "title": "Two Frappe Apps Simultaneously"
 },
 {
  "allow_guest": 1,
  "content": "Welcome to Wiki Space docs",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-12 12:59:07.676024",
  "name": "td45ibd37m",
  "published": 1,
  "route": "docs/new-wiki-page",
  "title": "New Wiki Page"
 },
 {
  "allow_guest": 1,
  "content": "\n\n----------\n\n### üîπ 1. Work with DocTypes & ORM\n\n-   Create, read, update, delete (CRUD) records.\n\n    ```python\n    import frappe\n    doc = frappe.get_doc(\"ToDo\", \"TASK0001\")  # fetch document\n    doc.status = \"Closed\"\n    doc.save()\n\n    ```\n\n-   Query records using **frappe ORM**:\n\n    ```python\n    todos = frappe.get_all(\"ToDo\", filters={\"status\": \"Open\"}, fields=[\"name\", \"description\"])\n\n    ```\n\n-   Insert new documents:\n\n    ```python\n    new_todo = frappe.get_doc({\"doctype\": \"ToDo\", \"description\": \"From console\"})\n    new_todo.insert()\n\n    ```\n\n\n----------\n\n### üîπ 2. Run Whitelisted / API Methods\n\n-   Call functions exposed with `@frappe.whitelist`:\n\n    ```python\n    frappe.call(\"frappe.desk.form.load.getdoc\", doctype=\"ToDo\", name=\"TASK0001\")\n\n    ```\n\n\n----------\n\n### üîπ 3. Debugging & Development\n\n-   Import and test functions from your **custom apps**.\n\n-   Run quick snippets to verify business logic.\n\n-   Print logs, check variables, or test patches/migrations.\n\n\n----------\n\n### üîπ 4. Database Access\n\n-   Direct SQL queries:\n\n    ```python\n    frappe.db.sql(\"SELECT name, status FROM tabToDo WHERE status='Open'\")\n\n    ```\n\n-   Use db API:\n\n    ```python\n    frappe.db.get_value(\"User\", {\"email\": \"admin@example.com\"}, \"name\")\n    frappe.db.set_value(\"User\", \"Administrator\", \"first_name\", \"Admin\")\n\n    ```\n\n\n----------\n\n### üîπ 5. User & Permissions\n\n-   Switch users in context:\n\n    ```python\n    frappe.set_user(\"Administrator\")\n\n    ```\n\n-   Check permissions:\n\n    ```python\n    frappe.has_permission(\"ToDo\", \"read\")\n\n    ```\n\n\n----------\n\n### üîπ 6. Caching & Config\n\n-   Work with cache:\n\n    ```python\n    frappe.cache().set_value(\"key\", \"value\")\n    frappe.cache().get_value(\"key\")\n\n    ```\n\n-   Change site config:\n\n    ```python\n    frappe.conf.get(\"developer_mode\")\n\n    ```\n\n\n----------\n\n### üîπ 7. Background Jobs & Tasks\n\n-   Queue jobs manually:\n\n    ```python\n    from frappe.utils.background_jobs import enqueue\n    enqueue(\"frappe.email.queue.flush\")\n\n    ```\n\n\n----------\n\n### üîπ 8. Utilities\n\n-   Dates & time utilities (`frappe.utils`).\n\n-   File handling (`frappe.utils.file_manager`).\n\n-   Notifications, emails, printing, exporting.\n\n\n----------\n\n### üîπ 9. Maintenance & Patching\n\n-   Run patches without migration:\n\n    ```python\n    from frappe.modules.patch_handler import run_single\n    run_single(\"your_app.patches.some_patch\")\n\n    ```\n\n-   Fix corrupt documents.\n\n-   Update workflow states.\n\n\n----------\n\n### üîπ 10. Site Context\n\n-   Get current site:\n\n    ```python\n    frappe.local.site\n\n    ```\n\n-   Access session info:\n\n    ```python\n    frappe.session.user\n\n    ```\n\n\n----------\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:07:45.021722",
  "name": "3aq12r2ivs",
  "published": 1,
  "route": "docs/using-bench-console",
  "title": "Using Bench Console"
 },
 {
  "allow_guest": 1,
  "content": "\n## üîπ 1. Creating a Backup\n\nFrappe provides a built-in command to generate backups. Run this from your bench folder:\n\n```bash\nbench --site yoursite.local backup\n```\n\nThis creates three files under `sites/yoursite.local/private/backups/`:\n\n* `dbname-database.sql.gz` ‚Üí compressed SQL dump of your MariaDB database\n\n* `dbname-files.tar` ‚Üí archive of public files (uploaded files visible on website)\n\n* `dbname-private-files.tar` ‚Üí archive of private files (restricted uploads)\n\nüëâ These files are timestamped for easy identification.\n\n***\n\n## üîπ 2. Restoring Into a New Site\n\nSuppose you want to restore this backup into a **new site** because your current one broke or you‚Äôre testing migration.\n\n### Step 1: Create a new site\n\n```bash\nbench new-site newsite.local\n```\n\nThis initializes a fresh database, user, and configuration.\n\n***\n\n### Step 2: Restore the database dump\n\nDecompress and load the SQL dump into the new site‚Äôs database.\n\n```bash\ngunzip dbname-database.sql.gz\nmysql -u root -p new_dbname < dbname-database.sql\n```\n\n‚ö†Ô∏è `new_dbname` comes from `sites/newsite.local/site_config.json` under `\"db_name\"`.\n\n***\n\n### Step 3: Sync schema and patches\n\nRun migrations so Frappe aligns doctypes and applies missing patches:\n\n```bash\nbench --site newsite.local migrate\n```\n\n***\n\n### Step 4: Restore files\n\nIf you also want uploaded files restored:\n\n```bash\ntar -xvf dbname-files.tar -C sites/newsite.local/public/files/\ntar -xvf dbname-private-files.tar -C sites/newsite.local/private/files/\n```\n\n***\n\n### Step 5: Restore site config (optional)\n\nIf your old backup had a specific encryption key or special settings, copy them into `sites/newsite.local/site_config.json`.\n\nAt minimum, ensure the `\"encryption_key\"` from the backup site matches. Otherwise, stored passwords and tokens may not decrypt properly.\n\n***\n\n## üîπ 3. Testing the Restored Site\n\n* Start your bench:\n\n  ```bash\n  bench start\n  ```\n\n* Clear caches:\n\n  ```bash\n  bench --site newsite.local clear-cache\n  bench --site newsite.local clear-website-cache\n  ```\n\n* Log in to confirm the site is working.\n\n***\n\n## üîπ 4. Tips & Best Practices\n\n* Always back up **before running** `bench update` or migrations.\n\n* Store backups offsite (e.g., S3, GDrive, or self-hosted storage).\n\n* Match **Frappe/ERPNext versions** between backup and restore environment. Restoring a v13 backup into a v16 bench will cause schema issues.\n\n* If apps have been split out (like Blogs, Newsletter, or Offsite Backups in v16), install them separately via `bench get-app`.\n\n***\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:12:25.488443",
  "name": "62ejmru3g1",
  "published": 1,
  "route": "docs/how-to-backup-and-restore-a-frappe-erpnext-database-safely",
  "title": "How to Backup and Restore a Frappe/ERPNext Database Safely"
 },
 {
  "allow_guest": 1,
  "content": "---\ntitle: Nginx Reverse Proxy for Frappe\nlayout: default\norder: 8\n---\n\n## Install nginx\n```bash\nsudo apt update\nsudo apt install -y nginx\nsystemctl status nginx\n```\n\n## Example nginx config\n```nginx\nserver {\n    listen 80;\n    server_name YOUR_SERVER_IP;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /assets {\n        alias /home/frappe/frappe-bench/sites/assets;\n    }\n}\n```\n\n## Enable & reload\n```bash\nsudo ln -s /etc/nginx/sites-available/frappe /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n```\n\n## Troubleshooting\n```bash\nbench build\nbench restart\n```\n\n\n## Verify the aws ec2 security group looks like this\n\n### inbound rule\n![Alt text](/assets/images/inbound.png)\n\n### outbound rule\n![Alt text](/assets/images/outbound.png)\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:13:26.260319",
  "name": "6le146tn1u",
  "published": 1,
  "route": "docs/nginx-reverse-proxy-for-frappe",
  "title": "Nginx Reverse Proxy for Frappe"
 },
 {
  "allow_guest": 1,
  "content": "\nThis page covers installing system dependencies, Node/Yarn, enabling services, configuring MariaDB, and creating a Python virtual environment.\n\n## Step 1 ‚Äî System update & dependencies\n```bash\n\n# 1) system update\nsudo apt update && sudo apt upgrade -y\n\n# 2) install OS packages (prereqs)\nsudo apt install -y git curl wget \\\n  python-is-python3 python3-dev python3-pip python3-venv build-essential \\\n  redis-server libmariadb-dev mariadb-server mariadb-client pkg-config\n\n# (optional but useful)\nsudo apt install -y software-properties-common\n\n```\n\n## Step 2 ‚Äî Node.js, npm and Yarn\n```bash\n\nsudo apt install nodejs\nsudo apt install npm\nsudo npm install --global yarn\n\n```\n\n## Step 3 ‚Äî Enable services\n```bash\nsudo systemctl enable --now mariadb\nsudo systemctl enable --now redis-server\n```\n\n\n## Step 3 ‚Äî MySql Secure installation:\n```bash\nsudo mysql_secure_installation\n```\n\nit will ask for\n\n```\nEnter current password for root (enter for none): # press enter if this not done before\n\nSwitch to unix_socket authentication [Y/n] y\n\nChange the root password? [Y/n] y\n\n```\n\nSet Password for Mysql database\n```\nNew password: \nRe-enter new password:\n```\n```\nRemove anonymous users? [Y/n] y\n\nDisallow root login remotely? [Y/n] y\n\nRemove test database and access to it? [Y/n] y\n\nReload privilege tables now? [Y/n] y\n```\n## Step 4 - Configure Python Virtual Env\n\ncreate python env\n\n```\npython3 -m venv menv\n```\nsource the menv/bin/activate\n\n```\nsource menv/bin/activate\n```\n\n## Step 5 - Install frappe-bench\n\n```\npip install frappe-bench\n\nbench --version\n```\n\n## Step 6 - Create new bench & goto that bench folder\n\n```\nbench init mbench\n\ncd mbench\n\n```\n\n## Step 7 - Create New Site\nthis will ask for¬†\nMariaDB root password (password which You set during sudo mysql_secure_installation )\nAdministrator password to set (which will be used for frappe desktop login)\n\n\n```\nbench new-site msite.local\n\n```\n\n```\n(menv) ubuntu@ip-172-31-39-119:~/mbench$ bench new-site msite.local\nEnter mysql super user [root]:\nMySQL root password:\n\nInstalling frappe...\nUpdating DocTypes for frappe        : [========================================] 100%\nSet Administrator password:\nUpdating Dashboard for frappe\nmsite.local: SystemSettings.enable_scheduler is UNSET\n*** Scheduler is disabled ***\n(menv) ubuntu@ip-172-31-39-119:~/mbench$\n```\n\n\n\n## Step 8 - Use New Site\n\n```bash\nbench use msite.local\n```\n\n\n## Step 9 - Build And Start Server\n\n```bash\nbench build\nbench start\n```\nHere is the Command and Their execution output\n\n```\n[inxeoz@manjaro-i3 | prob | 04:11:59 PM]$ bench build\n-------------------------------------------------------------\nAssets for Commit c6032ebdb9c0b427d0e9234cc38e806ebff4dbb0 don't exist\n‚úî Application Assets Linked\n\n\nyarn run v1.22.22\nwarning ../../../../package.json: No license field\n$ node esbuild --production --run-build-command\nBrowserslist: caniuse-lite is outdated. Please run:\n------------------------------------------------------------------\nfrappe/dist/js/\n‚îú‚îÄ billing.bundle.QQE2RPCA.js                               4.44 Kb\n‚îú‚îÄ bootstrap-4-web.bundle.FOZOVELL.js                       1.73 Kb\n‚îú‚îÄ calendar.bundle.4A4YITIU.js                              264.60 Kb\n‚îú‚îÄ controls.bundle.ABXYTQCU.js                              883.38 Kb\n‚îú‚îÄ data_import_tools.bundle.44FYB4HH.js                     129.08 Kb\n‚îú‚îÄ desk.bundle.XFDCSUZ4.js                                  1113.95 Kb\n‚îú‚îÄ dialog.bundle.JOPO3YHJ.js                                58.82 Kb\n\n DONE  Total Build Time: 7.037s\n-------------------------------------------------------------------\n WARN  Cannot connect to redis_cache to update assets_json\nDone in 7.57s.\nCompiling translations for frappe\nMO file already up to date at /home/inxeoz/proj/prob/sites/assets/locale/af/LC_MESSAGES/frappe.mo\nMO file already up to date at /home/inxeoz/proj/prob/sites/assets/locale/ar/LC_MESSAGES/frappe.mo\nMO file already up to date at /home/inxeoz/proj/prob/sites/assets/locale/fi/LC_MESSAGES/frappe.mo\n--------------------------------------------------------\nCompiling translations for itsupport_frappe\nCompiling translations for cerp\nCompiling translations for mapit\nCompiling translations for erpnext\nCompiling translations for digipass\nCompiling translations for wiki\n--------------------------------------------------------------------\n```\n\n\n\n\n```bash\n[inxeoz@manjaro-i3 | prob | 04:11:44 PM]$ bench start\n-----------------------------------------------------------\n16:11:46 socketio.1    | Realtime service listening on:  9000\n16:11:47 watch.1       |\n16:11:47 watch.1       | yarn run v1.22.22\n16:11:47 watch.1       | warning ../../../../package.json: No license field\n16:11:47 watch.1       | $ node esbuild --watch --live-reload\n16:11:47 web.1         | WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n16:11:47 web.1         |  * Running on all addresses (0.0.0.0)\n16:11:47 web.1         |  * Running on http://127.0.0.1:8000\n16:11:47 web.1         |  * Running on http://10.120.10.9:8000\n16:11:47 web.1         | Press CTRL+C to quit\n-------------------------------------------------------------\n```\n`Visit  http://127.0.0.1:8000 in browser`",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:05:35.682854",
  "name": "tq67am75a1",
  "published": 1,
  "route": "docs/installation",
  "title": "Quick installation"
 },
 {
  "allow_guest": 1,
  "content": "\nthis will ask for¬†\nMariaDB root password (password which You set during sudo mysql_secure_installation )\nAdministrator password to set (which will be used for frappe desktop login)\n\n\n```\nbench new-site msite.local\n\n```\n\n```\n(menv) ubuntu@ip-172-31-39-119:~/mbench$ bench new-site msite.local\nEnter mysql super user [root]:\nMySQL root password:\n\nInstalling frappe...\nUpdating DocTypes for frappe        : [========================================] 100%\nSet Administrator password:\nUpdating Dashboard for frappe\nmsite.local: SystemSettings.enable_scheduler is UNSET\n*** Scheduler is disabled ***\n(menv) ubuntu@ip-172-31-39-119:~/mbench$\n```\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:05:48.692490",
  "name": "tq7vhveahh",
  "published": 1,
  "route": "docs/creating new site",
  "title": "creating new site"
 },
 {
  "allow_guest": 1,
  "content": "\n\n```bash\nbench new-app mapp\n```\nit will ask bunch of details (fill as You need)\n```\n(menv) ubuntu@ip-172-31-39-119:~/mbench$ bench new-app mapp\nApp Title [Mapp]:\nApp Description: inxeoz\nApp Publisher: inxeoz\nApp Email: inxeoz@inxeoz.com\nApp License (agpl-3.0, apache-2.0, bsd-2-clause, bsd-3-clause, bsl-1.0, cc0-1.0, epl-2.0, gpl-2.0, gpl-3.0, lgpl-2.1, mit, mpl-2.0, unlicense) [mit]:\nCreate GitHub Workflow action for unittests [y/N]: N\nBranch Name [develop]:\n'mapp' created at /home/ubuntu/mbench/apps/mapp\n```\n\n\n## Install app to site\n```bash\nbench --site msite.local install-app mapp\n```\n\n## Build & start\n```bash\nbench build\nbench start\n```\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:06:14.031442",
  "name": "2ecvovs387",
  "published": 1,
  "route": "docs/creating-a-custom-frappe-app",
  "title": "Creating a Custom Frappe App"
 },
 {
  "allow_guest": 1,
  "content": "\n\n## Enable developer mode\n```bash\nbench set-config developer_mode 1\nbench set-config server_script_enabled true\n```\n\nor modify the `path_to_bench/sites/your_site/site_config.json`\n\n```json\n{\n \"allow_cors\": \"*\",\n \"db_name\": \"_eecd1f0e0648ca00\",\n \"db_password\": \"hZCoi4VZZWwjXUw5\",\n \"db_type\": \"mariadb\",\n \"db_user\": \"_eecd1f0e0648ca00\", \n \"encryption_key\": \"vGY_AK9QNC8cFfrphkpYe1D9cXLEzhmBNaBNBDBA3eQ=\",\n  \n \"developer_mode\": 1,\n \"server_script_enabled\": true\n}\n```\n\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:06:56.741018",
  "name": "2rnlc281ev",
  "published": 1,
  "route": "docs/set-config-in-frappe",
  "title": "set-config in frappe"
 },
 {
  "allow_guest": 1,
  "content": "\n----------\n\n\n<br>\n![Doctype Property](/assets/images/doctype-fields-property.png \"DocType Page When Clicked On Add DocType\")\n\n----------\n\n## üîπ Basic Properties of a Field\n\n1.  **Label**\n\n    -   The human-readable name shown on the form.\n\n    -   Example: _Customer Name_.\n\n2.  **Fieldname**\n\n    -   The internal name (used in code/database).\n\n    -   Must be unique within the DocType.\n\n    -   Example: `customer_name`.\n\n3.  **Fieldtype**\n\n    -   Defines the **kind of field** (data type & behavior).\n\n    -   Example: `Data`, `Date`, `Select`, `Link`, `Table`, etc.\n\n    -   (Full list below üëá)\n\n4.  **Options**\n\n    -   Extra settings, depending on the fieldtype.\n\n    -   Example:\n\n        -   For **Link** ‚Üí target DocType name.\n\n        -   For **Select** ‚Üí list of options (comma-separated).\n\n        -   For **Table** ‚Üí child DocType name.\n\n5.  **Default**\n\n    -   Default value for the field.\n\n    -   Example: `0`, `Draft`, `India`.\n\n6.  **Mandatory** (Reqd)\n\n    -   Marks the field as required.\n\n    -   User cannot save the form without filling it.\n\n7.  **Read Only**\n\n    -   Makes the field non-editable.\n\n    -   Useful for auto-filled values (like _Created By_).\n\n8.  **Hidden**\n\n    -   Field won‚Äôt be visible on the form.\n\n    -   Data is still stored in the DB.\n\n\n----------\n\n## üîπ Field Behavior\n\n9.  **In List View**\n\n    -   Field is visible in the **list view** (table view of records).\n\n    -   Example: Showing _Customer Name_ in list of Sales Orders.\n\n10.  **In Standard Filter**\n\n    -   Allows this field to appear in the filter dropdown in list view.\n\n11.  **In Global Search**\n\n    -   Includes this field in global search results.\n\n12.  **Bold**\n\n    -   Makes field label bold (for emphasis).\n\n13.  **Unique**\n\n    -   Ensures no duplicate values are stored in this field across records.\n\n\n----------\n\n## üîπ Permissions & Validation\n\n14.  **Index**\n\n    -   Adds a DB index for faster searches/filtering.\n\n15.  **Allow in Quick Entry**\n\n    -   Field shows up in **Quick Entry** dialog (mini-form).\n\n16.  **Ignore User Permissions**\n\n    -   Field bypasses user permission checks when fetching data.\n\n17.  **Depends On**\n\n    -   Field visibility depends on another field‚Äôs value.\n\n    -   Example: Show ‚ÄúPAN Number‚Äù only if `Country = India`.\n\n18.  **Mandatory Depends On**\n\n    -   Makes field required only if a condition is met.\n\n    -   Example: `doc.status==\"Approved\"`.\n\n19.  **Read Only Depends On**\n\n    -   Makes field read-only based on a condition.\n\n\n----------\n\n## üîπ Display Control\n\n20.  **Collapsible**\n\n    -   Collapses a section by default.\n\n    -   Used for better UI grouping.\n\n21.  **Collapsible Depends On**\n\n    -   Collapses section only if a condition is true.\n\n22.  **Print Hide**\n\n    -   Field will be hidden in print format.\n\n23.  **Print Width**\n\n    -   Custom column width in print format.\n\n\n----------\n\n## üîπ Important Fieldtypes\n\nHere‚Äôs the **most common field types** in Frappe:\n\n-   **Data** ‚Üí Short text input\n\n-   **Text** ‚Üí Multi-line text\n\n-   **Text Editor** ‚Üí Rich text editor (HTML)\n\n-   **Int / Float / Currency** ‚Üí Numeric fields\n\n-   **Date / Datetime / Time** ‚Üí Date and time fields\n\n-   **Check** ‚Üí Checkbox (boolean)\n\n-   **Select** ‚Üí Dropdown (static options or fetched from query)\n\n-   **Link** ‚Üí Foreign key to another DocType\n\n-   **Dynamic Link** ‚Üí Link based on another field‚Äôs value\n\n-   **Table** ‚Üí Child Table (linked child DocType)\n\n-   **Attach / Attach Image** ‚Üí File upload\n\n-   **Signature** ‚Üí Capture signature\n\n-   **Password** ‚Üí Hidden input field\n\n-   **Rating** ‚Üí Star rating\n\n-   **Color** ‚Üí Color picker\n\n\n----------\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:09:52.047056",
  "name": "4ig3n32vh2",
  "published": 1,
  "route": "docs/doctype-fields",
  "title": "DocType Fields"
 },
 {
  "allow_guest": 1,
  "content": "\n\n\n----------\n![Doctype Settings](/assets/images/doctype-settings.png \"DocType Page When Clicked Naming Section in Doctype Customization Page \")\n\n----------\n\n### Required Fields:\n\n1.  **Name***\n\n    -   The name of your new DocType (e.g., `Invoice`, `Student`, `Task`).\n\n    -   It becomes the table name internally (e.g., `tabInvoice`).\n\n2.  **Module***\n\n    -   The Frappe app/module where this DocType will belong (e.g., `Accounts`, `Education`, `CRM`).\n\n    -   Helps organize and group related DocTypes.\n\n\n----------\n\n### Options / Checkboxes:\n\n1.  **Is Submittable**\n\n    -   Makes the DocType a _transactional document_ that can be ‚ÄúSubmitted‚Äù.\n\n    -   Once submitted, it **cannot be edited**; only canceled or amended (like a Sales Invoice, Purchase Order).\n\n    -   Useful for approval workflows.\n\n\n----------\n\n2.  **Is Child Table**\n\n    -   Makes this DocType a **child/line table** inside another DocType.\n\n    -   Example: _Items table_ inside _Sales Invoice_.\n\n    -   It will appear as a **grid** in the parent DocType.\n\n\n----------\n\n3.  **Is Single**\n\n    -   The DocType will have only **one record ever** (no list view).\n\n    -   Data is stored in `tabSingles`.\n\n    -   Example: _Global Defaults_, _System Settings_.\n\n    -   Used for storing configuration/settings.\n\n\n----------\n\n4.  **Is Tree**\n\n    -   Allows the DocType to have a **hierarchical/tree structure** using Nested Sets.\n\n    -   Example: _Chart of Accounts_, _Item Groups_, _Departments_.\n\n    -   Useful when records have parent-child relationships.\n\n\n----------\n\n5.  **Custom?**\n\n    -   Indicates if this DocType is **custom-created** by the user, not part of the core app.\n\n    -   Checked automatically when you create a new DocType through the UI.\n\n\n----------\n\n6.  **Is Virtual**\n\n    -   A **non-database DocType** (no physical table is created).\n\n    -   Useful when you want to represent external/derived data (e.g., API-based data, reports).\n\n    -   Used for advanced customizations.\n\n\n----------\n\nüëâ In short:\n\n-   **Submittable** ‚Üí For transactional docs.\n\n-   **Child Table** ‚Üí For nested tables inside other docs.\n\n-   **Single** ‚Üí For settings/config docs (one record only).\n\n-   **Tree** ‚Üí For hierarchical structures.\n\n-   **Custom** ‚Üí Marks it as a custom DocType.\n\n-   **Virtual** ‚Üí No DB table, used for computed or external data.\n\n\n----------\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:10:54.652483",
  "name": "562ndv2hs3",
  "published": 1,
  "route": "docs/doctype",
  "title": "DocType"
 },
 {
  "allow_guest": 1,
  "content": "\n\n## Open console\n```bash\nbench --site mysite.localhost console\n```\n\n## Examples (i.e python script)\n```python\nfrappe.get_doc(\"User\", \"Administrator\").full_name\n\nuser = frappe.get_doc(\"User\", \"test@example.com\")\nuser.enabled = 0\nuser.save()\nfrappe.db.commit()\n```\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:08:42.496498",
  "name": "3sovni4p4q",
  "published": 1,
  "route": "docs/using-bench-console-sim",
  "title": "Using Bench Console sim"
 },
 {
  "allow_guest": 1,
  "content": "\n\n----------\n<br>\n![Doctype Property](/assets/images/doctype-naming.png \"DocType Page When Clicked Naming Section in Doctype Customization Page \")\n\n\n----------\n\n## üîπ What is a Naming Rule?\n\n-   Every DocType in Frappe has a **Name** (unique ID).\n\n-   By default, it can either be:\n\n    -   An **Auto-generated ID** (like _INV-0001_), or\n\n    -   A **User-input value** (like entering Customer Name).\n\n\nYou set this under **DocType ‚Üí Naming** section.\n\n----------\n\n## üîπ Types of Naming Rules\n\n### 1. **Autoname**\n\nThis field controls how the name is generated. Options:\n\n1.  **Prompt**\n\n    -   User is asked to enter the name manually.\n\n    -   Example: _Student Roll Number_.\n\n2.  **field:fieldname**\n\n    -   Uses the value of another field as the record name.\n\n    -   Example: If `customer_name` is the field, then the document name = _\"John Doe\"_.\n\n3.  **naming_series:**\n\n    -   Uses a prefix + incrementing number.\n\n    -   Example: `INV-.YYYY.-` ‚Üí _INV-2025-0001_.\n\n    -   Needs a **Naming Series field** in the DocType.\n\n4.  **format:‚Ä¶**\n\n    -   Lets you define a custom format.\n\n    -   Example: `format:{customer}-{####}` ‚Üí _CUST-0001_.\n\n    -   `{####}` = running number.\n\n5.  **hash**\n\n    -   Auto generates a random unique hash.\n\n    -   Example: _f8a3c2d1b9_.\n\n    -   Used when uniqueness is more important than readability.\n\n\n----------\n\n### 2. **Naming Series**\n\n-   When you choose `naming_series:`, you can define **series patterns**.\n\n-   Example:\n\n    -   `SO-.YYYY.-` ‚Üí _SO-2025-0001_\n\n    -   `GRN-.MM.-` ‚Üí _GRN-09-0005_\n\n\nüëâ Variables you can use:\n\n-   `.YYYY.` ‚Üí Year\n\n-   `.YY.` ‚Üí Last 2 digits of year\n\n-   `.MM.` ‚Üí Month\n\n-   `.DD.` ‚Üí Day\n\n-   `####` ‚Üí Auto-increment number\n\n\n----------\n\n### 3. **Set as Title Field**\n\n-   Separately, you can set a **Title Field** (different from Name).\n\n-   Example: In _Sales Invoice_, name = _SINV-0001_, but title = _Customer Name_.\n\n-   Useful for user-friendly display in list view.\n\n\n----------\n\n## üîπ Example Scenarios\n\n-   **Customer Master**\n\n    -   Autoname: `field:customer_name`\n\n    -   Name = _John Doe_\n\n-   **Sales Order**\n\n    -   Autoname: `naming_series:`\n\n    -   Naming Series: `SO-.YYYY.-`\n\n    -   Name = _SO-2025-0001_\n\n-   **Student Admission Form**\n\n    -   Autoname: `format:ADM-{####}`\n\n    -   Name = _ADM-0001_\n\n\n----------\n\n‚ö° In short:\n\n-   **Prompt** ‚Üí User enters name.\n\n-   **field:‚Ä¶** ‚Üí Copy from a field.\n\n-   **naming_series** ‚Üí Prefix + number system.\n\n-   **format:‚Ä¶** ‚Üí Fully custom pattern.\n\n-   **hash** ‚Üí Random unique ID.\n",
  "docstatus": 0,
  "doctype": "Wiki Page",
  "meta_description": null,
  "meta_image": null,
  "meta_keywords": null,
  "modified": "2025-09-11 17:10:32.185201",
  "name": "4v1uoggvbc",
  "published": 1,
  "route": "docs/doctype-naming-rule",
  "title": "DocType Naming Rule"
 }
]