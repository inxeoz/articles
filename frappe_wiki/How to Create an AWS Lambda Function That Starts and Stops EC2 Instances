Here‚Äôs a full article you can use or publish ‚Äî step by step, beginner-friendly, but with enough technical depth for production use.

---

# üöÄ How to Create an AWS Lambda Function That Starts and Stops EC2 Instances

There are times when you don‚Äôt want an EC2 instance running all the time ‚Äî maybe it‚Äôs a dev server, a test environment, or something you only need on demand. Instead of logging into the AWS Console each time, you can automate this with an AWS Lambda function. In this guide, we‚Äôll walk through creating a Lambda function that can **start and stop EC2 instances** securely via an HTTPS endpoint.

---

## üõ†Ô∏è What You‚Äôll Build

* A **Python Lambda function** that accepts an HTTP request and starts/stops an EC2 instance.
* A **Function URL** (built-in HTTPS endpoint) so you can trigger the Lambda from Postman, curl, or even a script.
* Proper **IAM permissions** so Lambda can control only the instance(s) you choose.
* Token-based authentication so only authorized clients can start/stop your server.

---

## üìã Prerequisites

* An **AWS account** with permission to create IAM roles, Lambda functions, and manage EC2.
* An existing **EC2 instance** you want to start/stop.
* Basic familiarity with the AWS Console.

---

## Step 1: Create an IAM Role for Lambda

Lambda needs permission to control EC2.

1. Go to **IAM ‚Üí Roles ‚Üí Create role**.
2. Choose **AWS service ‚Üí Lambda** as the trusted entity.
3. Create a custom inline policy like this (replace with your values):

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:DescribeInstances"
      ],
      "Resource": [
        "arn:aws:ec2:ap-south-1:123456789012:instance/i-0ad60502a8ef460e9"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
}
```

üëâ Replace `ap-south-1`, `123456789012`, and the instance ID with yours.
üëâ Attach this policy to the role (call it something like `LambdaEC2ControlRole`).

---

## Step 2: Create the Lambda Function

1. Go to **Lambda ‚Üí Create function**.
2. Choose **Author from scratch**.
3. Name: `EC2ControlFunction`.
4. Runtime: **Python 3.9 (or later)**.
5. Execution role: choose **Use existing role** ‚Üí pick `LambdaEC2ControlRole`.
6. Click **Create function**.

---

## Step 3: Add the Python Code

Replace the default code with the following:

```python
import json
import os
import boto3

REGION = os.environ.get("AWS_REGION", "ap-south-1")
CLIENT_SECRET = os.environ.get("CLIENT_SECRET", "changeme")  # required token
ALLOWED_INSTANCES = os.environ.get("ALLOWED_INSTANCES", "")
ALLOWED = {s.strip() for s in ALLOWED_INSTANCES.split(",") if s.strip()}

ec2 = boto3.client("ec2", region_name=REGION)

def _response(status_code, body):
    return {
        "statusCode": status_code,
        "headers": {"Content-Type": "application/json"},
        "body": json.dumps(body)
    }

def lambda_handler(event, context):
    try:
        # --- Auth check ---
        headers = event.get("headers") or {}
        token = headers.get("x-api-key") or headers.get("X-Api-Key")
        if token != CLIENT_SECRET:
            return _response(401, {"error": "Unauthorized"})

        # --- Parse body ---
        body = event.get("body")
        if isinstance(body, str):
            body = json.loads(body)
        action = (body.get("action") or "").lower()
        instance_id = body.get("instanceId")

        if action not in ("start", "stop"):
            return _response(400, {"error": "Invalid action. Use 'start' or 'stop'."})
        if not instance_id:
            return _response(400, {"error": "Missing instanceId"})
        if ALLOWED and instance_id not in ALLOWED:
            return _response(403, {"error": "Instance not allowed"})

        # --- Perform action ---
        if action == "start":
            resp = ec2.start_instances(InstanceIds=[instance_id])
            state = resp["StartingInstances"][0]["CurrentState"]["Name"]
        else:
            resp = ec2.stop_instances(InstanceIds=[instance_id])
            state = resp["StoppingInstances"][0]["CurrentState"]["Name"]

        return _response(200, {"action": action, "instanceId": instance_id, "status": state})

    except Exception as e:
        print("Error:", str(e))
        return _response(500, {"error": "Internal error", "message": str(e)})
```

---

## Step 4: Set Environment Variables

In **Configuration ‚Üí Environment variables**, add:

* `CLIENT_SECRET = sometoken` (your secret; must match client request header)
* `ALLOWED_INSTANCES = i-0ad60502a8ef460e9` (comma separated list of allowed instance IDs)
* `AWS_REGION = ap-south-1`

---

## Step 5: Expose the Lambda with a Function URL

1. In Lambda console ‚Üí **Configuration ‚Üí Function URL ‚Üí Create function URL**.
2. Auth type: **NONE** (since we use our own token check).
3. Copy the generated URL (e.g. `https://abc123.lambda-url.ap-south-1.on.aws/`).

---

## Step 6: Test with Postman or curl

### Using curl

Start:

```bash
curl -X POST "https://<your-lambda-url>" \
  -H "x-api-key: sometoken" \
  -H "Content-Type: application/json" \
  -d '{"action":"start","instanceId":"i-0ad60502a8ef460e9"}'
```

Stop:

```bash
curl -X POST "https://<your-lambda-url>" \
  -H "x-api-key: sometoken" \
  -H "Content-Type: application/json" \
  -d '{"action":"stop","instanceId":"i-0ad60502a8ef460e9"}'
```

### Using Postman

* Method: **POST**
* URL: your Function URL
* Headers:

  * `Content-Type: application/json`
  * `x-api-key: sometoken`
* Body (raw, JSON):

  ```json
  { "action": "stop", "instanceId": "i-0ad60502a8ef460e9" }
  ```

---

## ‚úÖ Best Practices

* Always use a **CLIENT\_SECRET** or stronger auth (API Gateway with IAM/JWT) ‚Äî never leave a Function URL wide open.
* Restrict Lambda IAM role to **only the specific instance(s)** you want it to manage.
* Use **CloudWatch Logs** to debug if you hit errors.
* Consider scheduling start/stop using **EventBridge rules** if you want automation (e.g. shut down every night).

---

## üéØ Conclusion

With just a few steps, you now have a serverless ‚Äúremote control‚Äù for your EC2 instances. Whether you‚Äôre saving money on dev/test servers or building automation, Lambda + Function URLs gives you a secure, scalable way to manage instances with just a simple HTTP call.

---

üëâ Do you want me to also prepare this article as a **ready-to-publish Markdown file** (with nice formatting and copy-paste commands), so you can drop it directly into a blog or documentation site?
