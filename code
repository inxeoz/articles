import json
import os
import boto3




REGION = os.environ.get("AWS_REGION", "ap-south-1")
CLIENT_SECRET = os.environ.get("CLIENT_SECRET", "")            # required token to call this function
ALLOWED_INSTANCES = os.environ.get("ALLOWED_INSTANCES", "")    # e.g. "i-0123...,i-0456..."
# turn allowlist into a set for fast checks
ALLOWED = {s.strip() for s in ALLOWED_INSTANCES.split(",") if s.strip()}

ec2 = boto3.client("ec2", region_name=REGION)

def _response(status_code, body):
    return {
        "statusCode": status_code,
        "headers": {"Content-Type": "application/json"},
        "body": json.dumps(body)
    }

def lambda_handler(event, context):
    try:
        # --- Verify client token ---
        headers = event.get("headers") or {}
        token = headers.get("x-api-key") or headers.get("X-Api-Key") or ""
        if not CLIENT_SECRET:
            return _response(500, {"error": "Server misconfiguration: CLIENT_SECRET not set"})
        if token != CLIENT_SECRET:
            return _response(401, {"error": "Unauthorized"})

        # --- Parse body ---
        raw_body = event.get("body")
        if not raw_body:
            return _response(400, {"error": "Missing request body"})

        if isinstance(raw_body, str):
            try:
                body = json.loads(raw_body)
            except Exception:
                return _response(400, {"error": "Invalid JSON in body"})
        else:
            body = raw_body

        action = (body.get("action") or "").lower()
        instance_id = body.get("instanceId") or body.get("instance_id")

        if action not in ("start", "stop"):
            return _response(400, {"error": "Invalid action. Use 'start' or 'stop'."})
        if not instance_id:
            return _response(400, {"error": "Missing instanceId"})
        if ALLOWED and instance_id not in ALLOWED:
            return _response(403, {"error": "Instance not allowed", "instanceId": instance_id})

        # --- Perform EC2 action ---
        if action == "start":
            resp = ec2.start_instances(InstanceIds=[instance_id])
            state = resp["StartingInstances"][0]["CurrentState"]["Name"]
            return _response(200, {"action": "start", "instanceId": instance_id, "status": state})
        else:  # stop
            resp = ec2.stop_instances(InstanceIds=[instance_id])
            state = resp["StoppingInstances"][0]["CurrentState"]["Name"]
            return _response(200, {"action": "stop", "instanceId": instance_id, "status": state})

    except Exception as e:
        print("Error:", str(e))
        return _response(500, {"error": "Internal error", "message": str(e)})
